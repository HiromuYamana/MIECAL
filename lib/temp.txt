import 'dart:ui' as ui;
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image/image.dart' as img;

class AffectedAreaPage extends StatefulWidget {
  const AffectedAreaPage({super.key});

  @override
  State<AffectedAreaPage> createState() => _AffectedAreaPageState();
}

class _AffectedAreaPageState extends State<AffectedAreaPage> {
  ui.Image? _maskImage; // UI用
  img.Image? _rawMaskImage; // ピクセル取得用
  Offset? _selectedPosition;

  final Map<Color, String> colorToPart = {
    const Color.fromARGB(255, 255, 0, 0): '顔',
    const Color.fromARGB(255, 0, 255, 0): '頭',
    const Color.fromARGB(255, 0, 0, 255): '胸',
    const Color.fromARGB(255, 255, 255, 0): '腹部',
    const Color.fromARGB(255, 0, 255, 255): '右腕',
    const Color.fromARGB(255, 255, 0, 255): '左腕',
    const Color.fromARGB(255, 128, 0, 0): '右足',
    const Color.fromARGB(255, 0, 128, 0): '左足',
  };

  String? selectedPart;

  @override
  void initState() {
    super.initState();
    _loadMaskImage();
  }

  Future<void> _loadMaskImage() async {
    final byteData = await rootBundle.load('assets/body_mask.png');
    final buffer = byteData.buffer;
    final rawImage = img.decodeImage(buffer.asUint8List())!;
    final codec = await ui.instantiateImageCodec(buffer.asUint8List());
    final frame = await codec.getNextFrame();

    setState(() {
      _rawMaskImage = rawImage;
      _maskImage = frame.image;
    });
  }

  void _onTap(BuildContext context, TapUpDetails details, RenderBox box) {
    final localPos = box.globalToLocal(details.globalPosition);
    setState(() {
      _selectedPosition = localPos;
    });

    if (_rawMaskImage != null && _maskImage != null) {
      final scaleX = _rawMaskImage!.width / box.size.width;
      final scaleY = _rawMaskImage!.height / box.size.height;
      final x = (localPos.dx * scaleX).toInt();
      final y = (localPos.dy * scaleY).toInt();

      final pixel = _rawMaskImage!.getPixel(x, y);
      final pixelColor = Color.fromARGB(
        img.getAlpha(pixel),
        img.getRed(pixel),
        img.getGreen(pixel),
        img.getBlue(pixel),
      );

      final part = colorToPart[pixelColor];
      if (part != null) {
        setState(() {
          selectedPart = part;
        });
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('$part が選ばれました')),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('患部選択')),
      body: Center(
        child: _maskImage == null
            ? const CircularProgressIndicator()
            : LayoutBuilder(
                builder: (context, constraints) {
                  return GestureDetector(
                    onTapUp: (details) {
                      final box = context.findRenderObject() as RenderBox;
                      _onTap(context, details, box);
                    },
                    child: Stack(
                      children: [
                        Image.asset('assets/human_outline.png'),
                        if (_selectedPosition != null)
                          Positioned.fill(
                            child: CustomPaint(
                              painter: HighlightPainter(
                                position: _selectedPosition!,
                                color: Colors.yellow.withOpacity(0.3),
                              ),
                            ),
                          ),
                      ],
                    ),
                  );
                },
              ),
      ),
    );
  }
}

class HighlightPainter extends CustomPainter {
  final Offset position;
  final Color color;

  HighlightPainter({required this.position, required this.color});

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()..color = color;
    canvas.drawCircle(position, 30, paint); // ハイライト半径
  }

  @override
  bool shouldRepaint(covariant HighlightPainter oldDelegate) {
    return oldDelegate.position != position || oldDelegate.color != color;
  }
}
